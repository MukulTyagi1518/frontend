"use client";

import LiveSessionForm from "@/components/ui/LiveSessionForm";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { useState, useEffect } from "react";
import Header from "@/components/ui/header";
import { Sidebar } from "@/components/ui/SideBarDesign";
import { Checkbox } from "@/components/ui/checkbox";
import { Eye, EyeOff } from "lucide-react";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import Cookies from "js-cookie";

export default function Password() {
  const router = useRouter();
  const [isEditable, setIsEditable] = useState(false);
  const [passwordType, setPasswordType] = useState<"auto" | "custom" | null>(
    null
  );
  const [customPassword, setCustomPassword] = useState("");
  const [autoGeneratedPassword, setAutoGeneratedPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showAutoPassword, setShowAutoPassword] = useState(false); // For autogenerated password
  const [showCustomPassword, setShowCustomPassword] = useState(false); // For custom password

  const [userName, setUserName] = useState("");
  const [mailId, setMailId] = useState("");
  const [phoneNumber, setPhoneNumber] = useState("");
  const [status, setStatus] = useState(true);
  const [role, setRole] = useState("");
  const [gender, setGender] = useState("");
  const [appType, setAppType] = useState("");
  const [imageBase64, setImageBase64] = useState<string | null>(null);
  const [password, setPassword] = useState("");
 const [isOpen, setIsOpen] = useState(true);
  useEffect(() => {
    const savedFormData = Cookies.get("formData");
    if (savedFormData) {
      const parsedData = JSON.parse(savedFormData);
      setUserName(parsedData.userName || "");
      setMailId(parsedData.mailId || "");
      setPhoneNumber(parsedData.phoneNumber || "");
      setStatus(parsedData.status || true);
      setRole(parsedData.role || ""); // Ensure role is set
      setGender(parsedData.gender || ""); // Ensure gender is set
      // setAppType(parsedData.appType);
    }

    // Load Image from localStorage
    // setImageBase64(localStorage.getItem("userImage") || null);
  }, []);

  const roleMapping: { [key: string]: string } = {
    "Super Admin": "SUPERADMIN",
    "Sub Admin": "SUBADMIN2",
    Viewer: "VIEWER",
  };

  const handleSubmit = async () => {
    const payload = {
      name: userName,
      email: mailId,
      password:
        passwordType === "auto" ? autoGeneratedPassword : customPassword,
      role: roleMapping[role] || role,
      phoneNumber: phoneNumber,
      gender: gender,
      // image: imageBase64, // Base64 Image from localStorage
      // appType: appType,
    };

    console.log("Sending Payload:", JSON.stringify(payload, null, 2));

    try {
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/fitnearn/web/admin/access/users/add`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(payload),
        }
      );
      const responseData = await response.json();

      if (!response.ok) {
        console.error("Error Response:", responseData); // Log API error response
        throw new Error("Error creating user");
      }

      console.log("User created successfully:", responseData);

    // âœ… Store USR_ID in Cookies
    if (responseData.data && responseData.data.USR_ID) {
      Cookies.set("USR_ID", responseData.data.USR_ID, { expires: 1 });
      console.log("Stored USR_ID in Cookies:", responseData.data.USR_ID);
    }
    } catch (error) {
      console.error("Error:", error);
    }
  };

  const handleNext = async () => {
    console.log("Mapped Role:", roleMapping[role] || role);
    await handleSubmit(); // Submit before moving to next page
    router.push(
      "/accessControlManagement/adminUser/createUser/password/addToGroup"
    );
  };

  // Function to generate a random password
  const generatePassword = () => {
    const length = 12;
    const charset =
      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+";
    let password = "";
    for (let i = 0; i < length; i++) {
      password += charset.charAt(Math.floor(Math.random() * charset.length));
    }
    return password;
  };
  const handleAutoPasswordSelection = () => {
    setPasswordType("auto");
    setAutoGeneratedPassword(generatePassword());
  };

  // Generate password when "Autogenerate Password" is selected
  const handleAutoGenerate = () => {
    if (passwordType === "auto") {
      setAutoGeneratedPassword(generatePassword());
    }
  };

  // Define the steps for the progress bar
  const progressBarSteps = [
    {
      name: "User Details",
      color: "#0E9F6E", // Green
    },
    {
      name: "Password",
      color: "#FFFFFF", // White
    },
    {
      name: "Add to Group",
      color: "#A3A3A3", // Gray
    },
    {
      name: "Add to Role",
      color: "#A3A3A3", // Gray
    },
  ];

  return (
    < >
    <Sidebar isOpen={isOpen} setIsOpen={setIsOpen} />

    {/* Main Content */}
    <div
      className={`w-full flex-1 absolute left-0 top-0 transition-all duration-300 ease-in-out ${
        isOpen ? "pl-60" : "pl-16"
      }`} // Adjust padding based on sidebar state
    >
      <Header isOpen={isOpen} setIsOpen={setIsOpen}  />
      <LiveSessionForm
        breadcrumb={["Access Control Management", "Create Users", "Password"]}
        breadcrumbLinks={[
          "/accessControlManagement/adminUser/table",
          "/accessControlManagement/adminUser/createUser",
          "/accessControlManagement/adminUser/createUser/password",
        ]}
        breadcrumbIcons={[
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
          >
            <path
              d="M10.042 12L15.683 6.73096C16.086 6.35396 16.108 5.72096 15.731 5.31696C15.355 4.91296 14.72 4.89196 14.318 5.26896L8.617 10.595C8.219 10.967 8 11.465 8 12C8 12.535 8.219 13.033 8.616 13.405L14.317 18.731C14.51 18.911 14.755 19 15 19C15.268 19 15.534 18.894 15.73 18.683C16.107 18.279 16.085 17.647 15.682 17.269L10.042 12Z"
              fill="#FAFAFA"
            />
          </svg>,
        ]}
        isEditable={isEditable}
        setIsEditable={setIsEditable}
        headerTitle="Password"
        showBackArrow={true}
        showDropdown={false}
        showButton={false}
        statusBarSteps={progressBarSteps.map((step, index) => (
          <div className="flex items-center space-x-2" key={index}>
            {/* Connector line */}
            {index > 0 && (
              <div
                className="flex-grow h-px"
                style={{
                  backgroundColor: progressBarSteps[index - 1].color,
                }}
              ></div>
            )}
            {/* Step */}
            <div
              style={{
                color: step.color,
              }}
              className="flex items-center space-x-2 text-sm font-medium"
            >
              <span>{step.name}</span>
            </div>
          </div>
        ))}
        statusBarColorOverride={{
          1: progressBarSteps[0].color, // Create - Password
        }}
      >
        {/* Form Fields */}
        <div className="space-y-8 flex flex-col gap-2">
          <RadioGroup
            value={passwordType || ""}
            onValueChange={(value) => {
              setPasswordType(value as "auto" | "custom");
              if (value === "auto") handleAutoPasswordSelection();
            }}
          >
            {/* Autogenerate Password */}
            <div className="flex items-start space-x-2 ">
              <RadioGroupItem
                value="auto"
                id="auto-password"
                onClick={() => setPasswordType("auto")}
              />
              <div className="flex flex-col w-1/4">
                <label htmlFor="auto-password" className="text-white text-sm">
                  Autogenerate Password
                </label>
                <div className="relative mt-1">
                  <input
                    type={showAutoPassword ? "text" : "password"}
                    value={autoGeneratedPassword}
                    readOnly
                    placeholder="Autogenerated password"
                    className={`w-full text-gray-400 px-3 py-2 focus:outline-none border border-neutral-600 rounded-lg ${
                      passwordType === "auto"
                        ? "bg-neutral-900"
                        : "bg-[#262626]"
                    }`}
                  />
                  <button
                    type="button"
                    onClick={() => setShowAutoPassword(!showAutoPassword)}
                    className="absolute right-3 top-2.5 text-gray-400 hover:text-gray-200 focus:outline-none"
                  >
                    {showAutoPassword ? (
                      <EyeOff size={16} />
                    ) : (
                      <Eye size={16} />
                    )}
                  </button>
                </div>
              </div>
            </div>

            {/* Custom Password */}
            <div className="flex items-start space-x-2">
              <RadioGroupItem
                value="custom"
                id="custom-password"
                onClick={() => setPasswordType("custom")}
              />
              <div className="flex flex-col w-1/4">
                <label htmlFor="custom-password" className="text-white text-sm">
                  Custom Password
                </label>
                <input
                  type={showCustomPassword ? "text" : "password"}
                  placeholder="Enter a custom password"
                  value={customPassword}
                  onChange={(e) => setCustomPassword(e.target.value)}
                  disabled={passwordType !== "custom"}
                  className={`mt-1 w-full text-gray-400 px-3 py-2 focus:outline-none border border-neutral-600 rounded-lg ${
                    passwordType === "custom"
                      ? "bg-neutral-900"
                      : "bg-[#262626]"
                  }`}
                />
                <p className="text-xs text-gray-400 mt-1">
                  Use 10 or more characters &amp; min 2 special characters
                </p>
                <div className="flex items-center space-x-2 mt-2">
                  <Checkbox
                    id="show-custom-password"
                    checked={showCustomPassword}
                    onCheckedChange={() =>
                      setShowCustomPassword(!showCustomPassword)
                    }
                    className="h-4 w-4 text-primary"
                  />
                  <label
                    htmlFor="show-custom-password"
                    className="text-gray-400 text-sm"
                  >
                    Show Password
                  </label>
                </div>
              </div>
            </div>
          </RadioGroup>
        </div>

        {/* Next Button */}
        <div className="flex justify-end pt-8">
          <Button
            variant="ghost"
            className="rounded-lg bg-[#FAFAFA] text-[#262626] px-4 py-2 flex items-center space-x-2"
            onClick={handleNext}
          >
            Next
          </Button>
        </div>
      </LiveSessionForm>
    </div>
    </>
  );
}
